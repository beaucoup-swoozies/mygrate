// Generated by CoffeeScript 1.3.1
(function() {
  var Pg, Postgresql;

  Pg = require("pg");

  Postgresql = (function() {

    Postgresql.name = 'Postgresql';

    function Postgresql(config) {
      this.config = config;
    }

    Postgresql.prototype.using = function(cb) {
      return Pg.connect(this.config.connectionString, cb);
    };

    Postgresql.prototype.exec = function(sql, cb) {
      return this.using(function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.query(sql, function() {
          return cb.apply(null, Array.prototype.slice.apply(arguments));
        });
      });
    };

    Postgresql.prototype.init = function(cb) {
      var sql;
      sql = "create table if not exists schema_migrations(\n  version varchar primary key,\n  up text ,\n  down text,\n  created_at timestamp default now()\n);";
      return this.exec(sql, cb);
    };

    Postgresql.prototype.last = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc\nlimit 1;";
      return this.exec(sql, function(err, result) {
        if (err) {
          return cb(err);
        }
        return cb(null, result.rows[0]);
      });
    };

    Postgresql.prototype.all = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc;";
      return this.exec(sql, function(err, result) {
        if (err) {
          return cb(err);
        }
        return cb(null, result.rows);
      });
    };

    Postgresql.prototype.add = function(version, up, down, cb) {
      var sql;
      sql = "insert into schema_migrations(version, up, down)\nvalues($1, $2, $3)";
      return this.using(function(err, client) {
        return client.query(sql, [version, up, down], cb);
      });
    };

    Postgresql.prototype.remove = function(version, cb) {
      var sql;
      sql = "delete from schema_migrations\nwhere version = $1";
      return this.using(function(err, client) {
        return client.query(sql, [version], function(err) {
          return cb(err);
        });
      });
    };

    Postgresql.prototype.reset = function(cb) {
      return this.exec("DROP SCHEMA public CASCADE;", cb);
    };

    return Postgresql;

  })();

  module.exports = Postgresql;

}).call(this);
