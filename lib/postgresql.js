// Generated by CoffeeScript 1.3.3
(function() {
  var Fs, Path, Pg, Postgresql, Prompt, Utils, async;

  Path = require("path");

  Fs = require("fs");

  Pg = require("pg");

  Utils = require("./utils");

  Prompt = require("prompt");

  async = require("async");

  Prompt.message = "";

  Prompt.delimiter = "";

  Postgresql = (function() {

    function Postgresql(config) {
      this.config = config;
      if (this.config.host == null) {
        this.config.host = 'localhost';
      }
      if (this.config.port == null) {
        this.config.port = 5432;
      }
    }

    Postgresql.prototype.using = function(config, cb) {
      var connectionString;
      if (arguments.length === 1) {
        cb = config;
        config = this.config;
      }
      connectionString = "tcp://";
      connectionString += config.user;
      if (config.password) {
        connectionString += ":" + config.password;
      }
      connectionString += "@" + config.host;
      if (config.port) {
        connectionString += ":" + config.port;
      }
      if (config.database) {
        connectionString += "/" + config.database;
      }
      console.log("connectionString", connectionString);
      return Pg.connect(connectionString, function(err, client) {
        if (err) {
          console.error(err);
        }
        return cb(err, client);
      });
    };

    Postgresql.prototype.exec = function(sql, cb) {
      return this.using(function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.query(sql, cb);
      });
    };

    Postgresql.prototype.execFile = function(filename, cb) {
      var me;
      me = this;
      return Fs.readFile(filename, function(err, script) {
        script = "DO $$\nBEGIN\n" + script + "\nEND $$;";
        if (err) {
          return cb(err);
        }
        return me.exec(script, cb);
      });
    };

    Postgresql.prototype.init = function(cb) {
      var sql;
      sql = "create table if not exists schema_migrations(\n  version varchar(256) not null primary key,\n  up text,\n  down text,\n  created_at timestamp default current_timestamp\n);";
      return this.exec(sql, cb);
    };

    Postgresql.prototype.last = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc\nlimit 1;";
      return this.exec(sql, function(err, result) {
        if (err) {
          return cb(err);
        }
        return cb(null, result.rows[0]);
      });
    };

    Postgresql.prototype.all = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc;";
      return this.exec(sql, function(err, result) {
        if (err) {
          return cb(err);
        }
        return cb(null, result.rows);
      });
    };

    Postgresql.prototype.add = function(version, up, down, cb) {
      var sql;
      sql = "insert into schema_migrations(version, up, down)\nvalues($1, $2, $3)";
      return this.using(function(err, client) {
        return client.query(sql, [version, up, down], cb);
      });
    };

    Postgresql.prototype.remove = function(version, cb) {
      var sql;
      sql = "delete from schema_migrations\nwhere version = $1";
      return this.using(function(err, client) {
        return client.query(sql, [version], function(err) {
          return cb(err);
        });
      });
    };

    Postgresql.prototype.createDatabase = function() {
      var config, promptConfig, using;
      Prompt.start();
      config = this.config;
      using = this.using;
      promptConfig = {
        properties: {
          user: {
            "default": "postgres"
          },
          password: {
            hidden: true
          }
        }
      };
      return Prompt.get(promptConfig, function(err, result) {
        var execRootSql, password, statements, user;
        user = result.user;
        password = result.password;
        statements = ["drop database if exists " + config.database + ";", "drop user if exists " + config.user + ";", "create user " + config.user + " password '" + config.password + "';", "create database " + config.database + " owner " + config.user + ";"];
        execRootSql = function(sql, cb) {
          var rootConfig;
          rootConfig = {
            user: user,
            password: password,
            host: config.host,
            port: config.port,
            database: "postgres"
          };
          return using(rootConfig, function(err, client) {
            return client.query(sql, cb);
          });
        };
        return async.forEachSeries(statements, execRootSql, function(err) {
          if (err) {
            console.error(err);
            return process.exit(1);
          } else {
            console.log("OK");
            return process.exit(0);
          }
        });
      });
    };

    return Postgresql;

  })();

  module.exports = Postgresql;

}).call(this);
